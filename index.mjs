// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@esm/index.mjs";var f=u.isPrimitive,g=p;var j=function(e,t){return f(e)?f(t)?null:new TypeError(g("invalid argument. `%s` must be a positive number. Value: `%s`.","beta",t)):new TypeError(g("invalid argument. `%s` must be a positive number. Value: `%s`.","alpha",e))},c=h;var b=function(e,t,n){return n/c(e(),1/t)},v=e,y=t,x=n,w=s,L=r,N=i,E=o,O=m,T=d.factory,P=a,V=l,G=p,R=j,A=b;var J=function(){var e,t,n,s,r,i;if(0===arguments.length)s=T();else if(1===arguments.length){if(!w(n=arguments[0]))throw new TypeError(G("invalid argument. Options argument must be an object. Value: `%s`.",n));if(N(n,"prng")){if(!L(n.prng))throw new TypeError(G("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",n.prng));s=n.prng}else s=T(n)}else{if(i=R(e=arguments[0],t=arguments[1]))throw i;if(arguments.length>2){if(!w(n=arguments[2]))throw new TypeError(G("invalid argument. Options argument must be an object. Value: `%s`.",n));if(N(n,"prng")){if(!L(n.prng))throw new TypeError(G("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",n.prng));s=n.prng}else s=T(n)}else s=T()}return v(r=void 0===e?f:h,"NAME","pareto-type1"),n&&n.prng?(v(r,"seed",null),v(r,"seedLength",null),x(r,"state",E(null),O),v(r,"stateLength",null),v(r,"byteLength",null),v(r,"toJSON",E(null)),v(r,"PRNG",s)):(y(r,"seed",o),y(r,"seedLength",m),x(r,"state",l,p),y(r,"stateLength",d),y(r,"byteLength",a),v(r,"toJSON",u),v(r,"PRNG",s),s=s.normalized),r;function o(){return s.seed}function m(){return s.seedLength}function d(){return s.stateLength}function a(){return s.byteLength}function l(){return s.state}function p(e){s.state=e}function u(){var n={type:"PRNG"};return n.name=r.NAME,n.state=V(s.state),n.params=void 0===e?[]:[e,t],n}function h(){return A(s,e,t)}function f(e,t){return P(e)||P(t)||e<=0||t<=0?NaN:A(s,e,t)}},M=J(),S=J;e(M,"factory",S);var z=M;export{z as default,S as factory};
//# sourceMappingURL=index.mjs.map
